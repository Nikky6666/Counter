{"version":3,"sources":["Button/Button.module.css","SetValues/ValuesBlock/Input/Input.module.css","Counter/DisplayingCount/DisplayingCount.module.css","CommonStyles/Block.module.css","Counter/ButtonsBlock/ButtonsBlock.module.css","SetValues/ValuesBlock/ValuesBlock.module.css","SetValues/ButtonsBlock/ButtonsBlock.module.css","Counter/DisplayingCount/DisplayingCount.js","Button/Button.js","Counter/ButtonsBlock/ButtonsBlock.js","Counter/Counter.js","SetValues/ValuesBlock/Input/Input.js","SetValues/ValuesBlock/ValuesBlock.js","SetValues/ButtonsBlock/ButtonsBlock.js","SetValues/SetValues.js","App.js","serviceWorker.js","redux/store.js","index.js"],"names":["module","exports","connectedDisplayingCount","connect","state","count","maxNumber","dispatch","changeMaxValue","number","type","changeStartValue","props","className","s","container","message","max","notMax","Button","onMouseDown","e","currentTarget","button","mouseDown","onMouseUp","mouseUp","onClick","this","onClickFunction","isDisabled","disabled","notDisabled","title","React","Component","connectedValuesBlock","increment","reset","buttonsBlock","isDisableInc","isDisableReset","connectedCounter","isDisableRes","Input","isRightInput","value","error","description","input","notError","onChange","callbackFunk","maxValue","minValue","setMaxValueError","setMaxValue","setMinValueError","setMinValue","useEffect","checkCoallision","changeValue","setError","setValue","newNumber","Number","target","isNaN","connectedButtonsBlock","isDisableSet","SetValues","App","Boolean","window","location","hostname","match","initialState","minNumber","store","createStore","action","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.85a28d5c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__21dP5\",\"notDisabled\":\"Button_notDisabled__3soXq\",\"disabled\":\"Button_disabled__38JLs\",\"mouseDown\":\"Button_mouseDown__7FELU\",\"mouseUp\":\"Button_mouseUp__20zw5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"Input_input__1SkfM\",\"description\":\"Input_description__VdPsV\",\"container\":\"Input_container__1-ZXj\",\"notError\":\"Input_notError__2V9jL\",\"error\":\"Input_error__IG2YZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"DisplayingCount_container__XMa7b\",\"message\":\"DisplayingCount_message__gNXP4\",\"notMax\":\"DisplayingCount_notMax__B9e03\",\"max\":\"DisplayingCount_max__2pYTq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Block_container__3LnEP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"buttonsBlock\":\"ButtonsBlock_buttonsBlock__2e7nK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"ValuesBlock_container__1He8G\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"ButtonsBlock_container__1fwxn\"};","import React from 'react';\r\nimport s from './DisplayingCount.module.css'\r\nimport {connect} from \"react-redux\";\r\n\r\nconst DisplayingCount = (props)=> {\r\n    return (\r\n        <div className={s.container}>\r\n            {props.message ?\r\n                <div className={s.message}>{props.message}</div> :\r\n                <div className={props.maxNumber === props.count ? s.max : s.notMax}>\r\n                    {props.count}\r\n                </div>}\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        count: state.count,\r\n        maxNumber: state.maxNumber\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) =>{\r\n    return {\r\n        changeMaxValue: (number) => {\r\n            const action = {type: \"CHANGE_MAX_VALUE\", number};\r\n            dispatch(action);\r\n        },\r\n        changeStartValue: (number) => {\r\n            const action = {type: \"CHANGE_MIN_VALUE\", number};\r\n            dispatch(action);\r\n        }\r\n    }\r\n};\r\n\r\nconst connectedDisplayingCount = connect(mapStateToProps, mapDispatchToProps)(DisplayingCount);\r\n\r\nexport default connectedDisplayingCount;","import React from 'react';\r\nimport s from './Button.module.css'\r\n\r\nclass Button extends React.Component {\r\n\r\n     onMouseDown = (e) => {\r\n        e.currentTarget.className=`${s.button} ${s.mouseDown}`;\r\n    };\r\n\r\n    onMouseUp = (e) => {\r\n        e.currentTarget.className=`${s.button} ${s.mouseUp}`;\r\n    }\r\n\r\n    render() {\r\n        return <button onClick={this.props.onClickFunction}\r\n                       className={this.props.isDisabled? `${s.button} ${s.disabled}`: `${s.button} ${s.notDisabled}` }\r\n                       disabled={this.props.isDisabled}\r\n                       onMouseDown={this.onMouseDown}\r\n                       onMouseUp={this.onMouseUp}\r\n        >{this.props.title}</button>\r\n    }\r\n}\r\n\r\nexport default Button;","import React from 'react';\r\nimport s from './ButtonsBlock.module.css'\r\nimport Button from \"../../Button/Button\";\r\nimport {connect} from \"react-redux\";\r\n\r\n\r\nconst ButtonsBlock = (props) => {\r\n    return (\r\n        <div className={s.buttonsBlock}>\r\n            <Button onClickFunction={props.increment} title=\"inc\" isDisabled={props.isDisableInc}/>\r\n            <Button onClickFunction={props.reset} title=\"reset\" isDisabled={props.isDisableReset}/>\r\n        </div>\r\n    )\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) =>{\r\n    return {\r\n        increment: () => {\r\n            const action = {type: \"INCREMENT\"};\r\n            dispatch(action);\r\n        },\r\n        reset: () => {\r\n            const action = {type: \"RESET\"};\r\n            dispatch(action);\r\n        }\r\n    }\r\n};\r\n\r\nconst connectedValuesBlock = connect(null, mapDispatchToProps)(ButtonsBlock);\r\n\r\n\r\nexport default connectedValuesBlock;","import React from 'react';\nimport s from '../CommonStyles/Block.module.css';\nimport DisplayingCount from \"./DisplayingCount/DisplayingCount\";\nimport ButtonsBlock from \"./ButtonsBlock/ButtonsBlock\";\nimport {connect} from \"react-redux\";\n\nconst Counter = (props) => {\n    return (\n        <div className={s.container}>\n            <DisplayingCount message={props.isDisableInc && props.isDisableRes ?\n                \"enter values and press set\" : null}/>\n            <ButtonsBlock isDisableInc={props.isDisableInc} isDisableReset={props.isDisableRes} />\n        </div>\n    );\n};\n\n\nconst mapStateToProps = (state) => {\n    return {\n        isDisableInc: state.isDisableInc,\n        isDisableRes: state.isDisableRes,\n    }\n};\n\nconst connectedCounter = connect(mapStateToProps, null)(Counter);\n\n\nexport default connectedCounter;\n","import React from 'react';\nimport s from './Input.module.css';\n\n\nclass Input extends React.Component {\n\n    render() {\n        const isRightInput = this.props.value.error ? false : true;\n        return (\n                <div className={s.container}>\n                    <span className={s.description}>{this.props.description}</span>\n                    <input type='number'\n                           className={isRightInput ? `${s.input} ${s.notError}` : `${s.input} ${s.error}`}\n                           value={this.props.value.number}\n                           onChange={this.props.callbackFunk}\n                    />\n                </div>\n        );\n    }\n}\n\nexport default Input;\n","import React, {useEffect} from 'react';\nimport s from './ValuesBlock.module.css';\nimport Input from \"./Input/Input\";\nimport {connect} from \"react-redux\";\n\n\nconst ValuesBlock = (props) => {\n\n    useEffect(()=>{\n        const commonError = checkCoallision(props.minValue.number, props.maxValue.number);\n        if(commonError) {\n            props.setMaxValueError(true);\n            props.setMinValueError(true);\n        }\n    },[props.maxValue.number, props.minValue.number])\n\n    const checkOnError = (number) => {\n        if (number >= 0 && number % 1 === 0 && !isNaN(number)) {\n            return false;\n        }\n        return true;\n    };\n\n    const checkCoallision = (minValue, maxValue) => {\n        if (maxValue === minValue || maxValue < minValue) return true;\n        return false;\n    };\n\n\n    const changeValue = (e, setError, setValue) =>{\n        const newNumber = Number(e.target.value);\n        setError(checkOnError(newNumber));\n        setValue(newNumber);\n    };\n\n    const onChangeMaxValue = (e) => {\n        changeValue(e, props.setMaxValueError, props.setMaxValue);\n        props.setMinValueError(false);\n    };\n    const onChangeStartValue = (e) => {\n        changeValue(e, props.setMinValueError, props.setMinValue);\n        props.setMaxValueError(false)\n    };\n\n\n    return (\n        <div className={s.container}>\n            <Input description=\"max value\"\n                   callbackFunk={onChangeMaxValue} value={props.maxValue}/>\n            <Input description=\"start value\" callbackFunk={onChangeStartValue} value={props.minValue}/>\n        </div>\n    );\n};\n\nconst mapStateToProps = (state) => {\n    return {\n        maxValue: state.maxValue,\n        minValue: state.minValue,\n    }\n};\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        setMaxValueError: (error)=>{\n            const action = {type: \"SET_MAX_VALUE_ERROR\", error};\n            dispatch(action);\n        },\n        setMaxValue: (number) =>{\n            const action = {type: \"SET_MAX_VALUE\", number};\n            dispatch(action);\n        },\n        setMinValueError: (error)=>{\n            const action = {type: \"SET_MIN_VALUE_ERROR\", error};\n            dispatch(action);\n        },\n        setMinValue: (number)=>{\n            const action = {type: \"SET_MIN_VALUE\", number};\n            dispatch(action);\n        }\n    }\n};\n\nconst connectedValuesBlock = connect(mapStateToProps, mapDispatchToProps)(ValuesBlock);\n\nexport default connectedValuesBlock;\n","import React from 'react';\nimport s from './ButtonsBlock.module.css'\nimport Button from \"../../Button/Button\";\nimport {connect} from \"react-redux\";\n\n\nconst ButtonsBlock = (props) => {\n    return (\n        <div className={s.container}>\n            <Button onClickFunction={props.SetValues} isDisabled={props.isDisabled} title='set'/>\n        </div>\n    );\n}\n\n\nconst mapStateToProps = (state) => {\n    return {\n        isDisabled: state.isDisableSet\n    }\n};\n\nconst mapDispatchToProps = (dispatch) =>{\n    return {\n        SetValues: () => {\n            const action = {type: \"SET_VALUES\"};\n            dispatch(action);\n        }\n    }\n};\n\nconst connectedButtonsBlock = connect(mapStateToProps, mapDispatchToProps)(ButtonsBlock)\n\n\nexport default connectedButtonsBlock;\n","import React from 'react';\nimport s from '../CommonStyles/Block.module.css';\nimport ValuesBlock from \"./ValuesBlock/ValuesBlock\";\nimport ButtonsBlock from \"./ButtonsBlock/ButtonsBlock\";\n\n\nconst SetValues = () => {\n    return (\n        <div className={s.container}>\n            <ValuesBlock/>\n            <ButtonsBlock/>\n        </div>\n    );\n};\n\nexport default SetValues;\n","import React from 'react';\nimport './App.css';\nimport Counter from \"./Counter/Counter\";\nimport SetValues from \"./SetValues/SetValues\";\n\nclass App extends React.Component {/*\n\n    componentDidMount() {\n        this.restorState();\n    }\n\n    saveState = () => {\n        const stateAsString = JSON.stringify(this.state);\n        localStorage.setItem(\"counterState\", stateAsString);\n    };\n\n    restorState = () => {\n        let stateAsString = localStorage.getItem(\"counterState\");\n        if (stateAsString) {\n            let state = JSON.parse(stateAsString);\n            this.setState(state);\n        }\n    };\n*/\n    render() {\n        return (\n            <div className=\"App\">\n                <SetValues />\n                <Counter />\n            </div>\n        );\n    }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {createStore} from \"redux\";\r\nconst SET_VALUES = \"SET_VALUES\";\r\nconst INCREMENT = \"INCREMENT\";\r\nconst RESET = \"RESET\";\r\nconst SET_MAX_VALUE =\"SET_MAX_VALUE\";\r\nconst SET_MAX_VALUE_ERROR =\"SET_MAX_VALUE_ERROR\";\r\nconst SET_MIN_VALUE =\"SET_MIN_VALUE\";\r\nconst SET_MIN_VALUE_ERROR =\"SET_MIN_VALUE_ERROR\";\r\n\r\nconst initialState = {\r\n    minNumber: 0,\r\n    maxNumber: 5,\r\n    count: 0,\r\n    maxValue: {error: false, number: 5},\r\n    minValue: {error: false, number: 0},\r\n    isDisableInc: false,\r\n    isDisableRes: false,\r\n    isDisableSet: true,\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SET_MAX_VALUE:\r\n            return {\r\n                ...state,\r\n                maxValue: {...state.maxValue, number: action.number},\r\n                isDisableSet: false,\r\n            };\r\n        case SET_MIN_VALUE:\r\n            return {\r\n                ...state,\r\n                minValue: {...state.minValue, number: action.number},\r\n                isDisableSet: false,\r\n            }\r\n        case SET_MAX_VALUE_ERROR:\r\n            return {\r\n                ...state,\r\n                maxValue: {...state.maxValue, error: action.error},\r\n                isDisableSet: action.error,\r\n            };\r\n        case SET_MIN_VALUE_ERROR:\r\n            return {\r\n                ...state,\r\n                minValue: {...state.minValue, error: action.error},\r\n                isDisableSet: action.error,\r\n            };\r\n\r\n        case SET_VALUES:\r\n            return {\r\n                ...state,\r\n                minNumber: state.minValue.number,\r\n                maxNumber: state.maxValue.number,\r\n                count: state.minValue.number,\r\n                isDisableSet: true\r\n            };\r\n\r\n        case INCREMENT: {\r\n            if(state.count+1===state.maxNumber)\r\n            return {\r\n                ...state,\r\n                count: state.count+1,\r\n                isDisableRes: false,\r\n                isDisableInc: true\r\n            };\r\n            return {\r\n                ...state,\r\n                count: state.count+1,\r\n                isDisableRes: false,\r\n            }\r\n        }\r\n        case RESET:\r\n            return {\r\n                ...state,\r\n                count: state.minValue.number,\r\n                isDisableRes: true,\r\n                isDisableInc: false\r\n            };\r\n\r\n        default: return state;\r\n    }\r\n};\r\n\r\nconst store = createStore(reducer);\r\nwindow.store = store;\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from \"react-redux\";\nimport store from \"./redux/store\";\n\nReactDOM.render(<Provider store={store}>\n    <App/>\n</Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}